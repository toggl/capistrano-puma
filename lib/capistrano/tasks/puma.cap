
namespace :load do
  task :defaults do
    set :puma_default_hooks, -> { true }
    set :puma_role, :app
    set :puma_env, -> {fetch(:rack_env, -> {fetch(:rails_env, -> {fetch(:stage)})}) }
    # Configure "min" to be the minimum number of threads to use to answer
    # requests and "max" the maximum.
    set :puma_threads, [0, 16]
    set :puma_workers, 0
    set :puma_rackup, -> { File.join(current_path, 'config.ru') }
    set :puma_state, -> { File.join(shared_path, "#{fetch :application}.state") }
    set :puma_pid, -> { File.join(shared_path, "#{fetch :application}.pid") }
    set :puma_bind, -> { File.join('unix://', shared_path, "#{fetch :application}.sock") }
    set :puma_conf, -> { File.join(shared_path, "#{fetch :application}.rb") }
    set :puma_access_log, nil
    set :puma_error_log, nil
    set :puma_init_active_record, false
    set :puma_preload_app, true
    set :puma_start_command, -> { "sudo /usr/bin/#{fetch :application}_start"}
    set :puma_stop_command,  -> { "sudo /usr/bin/#{fetch :application}_stop"}
    set :puma_control_app_uri, nil
    set :puma_prune_bundler, false

    # Rbenv and RVM integration
    set :rbenv_map_bins, fetch(:rbenv_map_bins).to_a.concat(%w{ puma pumactl })
  end
end

namespace :deploy do
  before :starting, :check_puma_hooks do
    invoke 'puma:add_default_hooks' if fetch(:puma_default_hooks)
  end
end

namespace :puma do

  desc 'Setup Puma config file'
  task :config do
    on roles(fetch(:puma_role)) do |role|
      template_puma 'puma', fetch(:puma_conf), role
    end
  end

  desc 'Start puma'
  task :start do
    on roles (fetch(:puma_role)) do
      execute "#{fetch(:puma_start_command)}"
    end
  end

  %w[halt stop].map do |command|
    desc "#{command} puma"
    task command do
      on roles (fetch(:puma_role)) do
        execute "#{fetch(:puma_stop_command)}"
      end
    end
  end

  %w[phased-restart restart status].map do |command|
    desc "#{command} puma"
    task command do
      on roles (fetch(:puma_role)) do
        within current_path do
          with rack_env: fetch(:puma_env) do
            if test "[ -f #{fetch(:puma_pid)} ]" and test "kill -0 $( cat #{fetch(:puma_pid)} )"
              # NOTE pid exist but state file is nonsense, so ignore that case
              execute :bundle, 'exec', :pumactl, "-S #{fetch(:puma_state)} #{command}"
            else
              if "status" == command
                info "Puma not running"
              else
                invoke 'puma:start'
              end
            end
          end
        end
      end
    end
  end

  task :check do
    on roles (fetch(:puma_role)) do |role|
      #Create puma.rb for new deployments
      unless  test "[ -f #{fetch(:puma_conf)} ]"
        warn 'puma.rb NOT FOUND!'
        #TODO DRY
        template_puma 'puma', fetch(:puma_conf), role
        info 'puma.rb generated'
      end
    end
  end


  task :smart_restart do
    if  puma_workers.to_i > 1
      invoke 'puma:phased-restart'
    else
      invoke 'puma:restart'
    end
  end



  def puma_workers
    fetch(:puma_workers, 0)
  end


  def puma_bind
    Array(fetch(:puma_bind)).collect do |bind|
      "bind '#{bind}'"
    end.join("\n")
  end

  def template_puma(from, to, role)
    [
        "lib/capistrano/templates/#{from}-#{role.hostname}-#{fetch(:stage)}.rb",
        "lib/capistrano/templates/#{from}-#{role.hostname}.rb",
        "lib/capistrano/templates/#{from}-#{fetch(:stage)}.rb",
        "lib/capistrano/templates/#{from}.rb.erb",
        "lib/capistrano/templates/#{from}.rb",
        "lib/capistrano/templates/#{from}.erb",
        "config/deploy/templates/#{from}.rb.erb",
        "config/deploy/templates/#{from}.rb",
        "config/deploy/templates/#{from}.erb",
        File.expand_path("../../templates/#{from}.rb.erb", __FILE__),
        File.expand_path("../../templates/#{from}.erb", __FILE__)
    ].each do |path|
      if File.file?(path)
        erb = File.read(path)
        upload! StringIO.new(ERB.new(erb).result(binding)), to
        break
      end
    end
  end

  task :add_default_hooks do
    after 'deploy:check', 'puma:check'
    after 'deploy:finished', 'puma:smart_restart'
  end

end
