#!/usr/bin/env puma
require 'English'
directory '<%= current_path %>'
rackup "<%=fetch(:puma_rackup)%>"
environment '<%= fetch(:puma_env) %>'
<% if fetch(:puma_tag) %>
  tag '<%= fetch(:puma_tag)%>'
<% end %>
pidfile "<%=fetch(:puma_pid)%>"
state_path "<%=fetch(:puma_state)%>"

<% if fetch(:puma_access_log) && fetch(:puma_error_log) %>
stdout_redirect '<%=fetch(:puma_access_log)%>', '<%=fetch(:puma_error_log)%>', true
<% end %>

threads <%=fetch(:puma_threads).join(',')%>

<%= puma_bind %>
workers <%= puma_workers %>
<% if fetch(:puma_worker_timeout) %>
worker_timeout <%= fetch(:puma_worker_timeout).to_i %>
<% end %>

<% if fetch(:puma_preload_app) %>
preload_app!
<% end %>

def clean_staled_socket
  %w(
    <%=fetch(:puma_bind)%>
    <%=fetch(:puma_pid)%>
    <%=fetch(:puma_state)%>
  ).each do |stalled_file|
    stalled_path = stalled_file.gsub('unix://','').strip
    if File.exist?(stalled_path)
      $stderr.puts "Deleting file #{stalled_path}: #{File.delete(stalled_path)}"
    end
  end
end

pid_file_name = '<%= fetch :puma_pid %>'
if File.exist?( pid_file_name)
  begin
    pid = `cat #{pid_file_name}`
    if $CHILD_STATUS.exitstatus &&
      $CHILD_STATUS.exitstatus.zero? &&
      Process.getpgid(pid.to_i)
      $stdout.puts 'Puma is already running'
    else
      $stdout.puts 'Failed to open pidfile'
      clean_staled_socket
    end
  rescue Errno::ESRCH
    $stdout.puts 'No process found via pidfile'
    clean_staled_socket
  end
else
  $stdout.puts 'Pidfile not found'
  clean_staled_socket
end

on_restart do
  puts 'Refreshing Gemfile'
  ENV["BUNDLE_GEMFILE"] = "<%= fetch(:bundle_gemfile, "#{current_path}/Gemfile") %>"
end

<% if fetch(:puma_prune_bundler) %>
prune_bundler
<% end %>

<% if fetch(:puma_control_app_uri) %>
activate_control_app '<%= fetch(:puma_control_app_uri) %>', { no_token: true }
<% end %>




<% if fetch(:puma_init_active_record) %>
on_worker_boot do
  ActiveSupport.on_load(:active_record) do
    ActiveRecord::Base.establish_connection
  end
end
<% end %>
